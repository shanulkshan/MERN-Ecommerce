pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'shanu99/nodeapp-cuban'
        DOCKER_TAG = "${BUILD_NUMBER}"
        DOCKERHUB_CREDENTIALS = 'test-dockerhubpassword'
    }
    
    stages {
        stage('SCM Checkout') {
            steps {
                retry(3) {
                    git branch: 'main', url: 'https://github.com/shanulkshan/MERN-Ecommerce.git'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image: ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}"
                    bat """
                        docker build -t ${env.DOCKER_IMAGE}:${env.DOCKER_TAG} .
                        docker tag ${env.DOCKER_IMAGE}:${env.DOCKER_TAG} ${env.DOCKER_IMAGE}:latest
                    """
                }
            }
        }
        
        stage('Login to Docker Hub') {
            steps {
                withCredentials([string(credentialsId: "${env.DOCKERHUB_CREDENTIALS}", variable: 'DOCKERHUB_PASSWORD')]) {
                    bat 'docker login -u shanu99 -p "%DOCKERHUB_PASSWORD%"'
                }
            }
        }
        
        stage('Push Image') {
            steps {
                script {
                    echo "Pushing Docker image: ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}"
                    bat """
                        docker push ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}
                        docker push ${env.DOCKER_IMAGE}:latest
                    """
                }
            }
        }
        
        stage('Cleanup Local Images') {
            steps {
                script {
                    echo "Cleaning up local Docker images"
                    bat """
                        docker rmi ${env.DOCKER_IMAGE}:${env.DOCKER_TAG} || echo "Image already removed"
                        docker rmi ${env.DOCKER_IMAGE}:latest || echo "Latest image already removed"
                    """
                }
            }
        }
    }
    
    post {
        always {
            script {
                bat 'docker logout || echo "Already logged out"'
                echo "Workspace cleaned up"
            }
        }
        success {
            echo 'Pipeline completed successfully!'
            bat 'echo SUCCESS: Docker image built and pushed to registry'
        }
        failure {
            echo 'Pipeline failed!'
            bat 'echo FAILURE: Check the logs for more details'
        }
    }
}